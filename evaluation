def select_and_rank_arms_above_threshold(expected_rewards, threshold=0.7, weights=[0.5, 0.5]):
    """
    Select ALL arms that have ANY value above threshold, then rank them by weighted sum
    Returns: list of (arm_index, weighted_sum, values) tuples, sorted by weighted_sum descending
    """
    
    expected_rewards = np.array(expected_rewards)
    
    # Step 1: Find arms where ANY objective exceeds threshold
    above_threshold_mask = np.any(expected_rewards > threshold, axis=1)
    above_threshold_arms = np.where(above_threshold_mask)[0]
    
    print(f"Arms above threshold {threshold}: {above_threshold_arms}")
    for arm in above_threshold_arms:
        print(f"  Arm {arm}: {expected_rewards[arm]}")
    
    # Step 2: If arms exceed threshold, rank them by weighted sum
    if len(above_threshold_arms) > 0:
        print("Ranking arms above threshold by weighted sum:")
        
        # Calculate weighted sums for arms above threshold
        weighted_sums = np.dot(expected_rewards[above_threshold_arms], weights)
        
        # Create list of (arm_index, weighted_sum, values)
        ranked_arms = []
        for i, arm in enumerate(above_threshold_arms):
            ranked_arms.append({
                'arm_index': arm,
                'weighted_sum': weighted_sums[i],
                'values': expected_rewards[arm],
                'exceeds_threshold': True
            })
        
        # Sort by weighted sum descending
        ranked_arms.sort(key=lambda x: x['weighted_sum'], reverse=True)
        
    else:
        print("No arms above threshold - ranking all arms by weighted sum")
        # Calculate weighted sums for all arms
        weighted_sums = np.dot(expected_rewards, weights)
        
        ranked_arms = []
        for arm in range(len(expected_rewards)):
            ranked_arms.append({
                'arm_index': arm,
                'weighted_sum': weighted_sums[arm],
                'values': expected_rewards[arm],
                'exceeds_threshold': False
            })
        
        # Sort by weighted sum descending
        ranked_arms.sort(key=lambda x: x['weighted_sum'], reverse=True)
    
    # Display ranking
    print("\nRanking of arms:")
    for i, arm_info in enumerate(ranked_arms):
        status = "âœ…" if arm_info['exceeds_threshold'] else "  "
        print(f"{i+1}. {status} Arm {arm_info['arm_index']}: "
              f"sum={arm_info['weighted_sum']:.4f}, values={arm_info['values']}")
    
    return ranked_arms

def get_top_recommendations(ranked_arms, top_k=3):
    """Get top K recommendations from ranked arms"""
    top_recommendations = ranked_arms[:top_k]
    
    print(f"\nTop {top_k} recommendations:")
    for i, rec in enumerate(top_recommendations):
        print(f"{i+1}. Arm {rec['arm_index']} (Score: {rec['weighted_sum']:.4f})")
    
    return top_recommendations
